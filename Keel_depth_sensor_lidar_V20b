/*
 * 03-09-2019 (c) Gerard, Kiel diepte meter Lidar icm 16x2 LCD display
 * Versie 1.0: Initial release
 * Versie 2.0: Aangepast naar aanleiding eerste test
 *              --> Minium dept waarde verhogen met 15 cm  --> Done
 *              --> Meting stabiliseren door instelbaar aantal metingen 3,4 of 5 doen en de gemiddelde waarde hievan te displayen --> Done
 *              --> versie 2.0b IPV parallel display, aansturing middels serieel
 * Versie 2.1: --> minium dept waarde aangepast (afstand tussen sensor- kiel 12 cm)
 *  To do: 
                --> Signal K interfacing maken via USB poort
*/

/*
 16x2 LCD gemodificeerd als keel diepgang meter
 
 Demonstrates the use a 16x2 LCD display.  The LiquidCrystal
 library works with all LCD displays that are compatible with the 
 Hitachi HD44780 driver. There are many of them out there, and you
 can usually tell them by the 16-pin interface.
 

 The circuit:

  LCD 5 Vdc  to Arduino 5v
  LCD I2C SCL  to Arduino SCL
  LCD I2C SDA  to Arduino SDA
  LCD Ground to Arduino GND

*/

/*------------------------------------------------------------------------------

  LIDARLite Arduino Library
  GetDistanceI2c

  This example shows how to initialize, configure, and read distance from a
  LIDAR-Lite connected over the I2C interface.

  Connections:
  LIDAR-Lite 5 Vdc (red) to Arduino 5v
  LIDAR-Lite I2C SCL (green) to Arduino SCL
  LIDAR-Lite I2C SDA (blue) to Arduino SDA
  LIDAR-Lite Ground (black) to Arduino GND
  
  (Capacitor recommended to mitigate inrush current when device is enabled)
  680uF capacitor (+) to Arduino 5v
  680uF capacitor (-) to Arduino GND

  See the Operation Manual for wiring diagrams and more information:
  http://static.garmin.com/pumac/LIDAR_Lite_v3_Operation_Manual_and_Technical_Specifications.pdf

------------------------------------------------------------------------------*/

// include the library code:
#include <LiquidCrystal_I2C.h>
#include <LIDARLite.h>
#include <Wire.h>

LIDARLite myLidarLite;

// initialize the library with the numbers of the interface pins
LiquidCrystal_I2C lcd(0x27,20,4);  // set the LCD address to 0x27 for a 16 chars and 2 line display


int dept,mindept=140; // Mindept is minium dept with keel up
int mindistancekeelsensor=12; // Afstand tussen kiel en Sensor bij opgetrokken kiel
int samplesperdisplay=20; // aantal te middelen samples alovorens de waarde zichtbaar te maken (tijd tussen 2 sampels is 50 ms)

void setup() {
  // Print a message to the LCD.
  lcd.init();                      // initialize the lcd
  lcd.backlight();
  lcd.setCursor(0,0);
  lcd.print("Magic M draft:");
  Serial.begin(115200); // Initialize serial connection to display distance readings
  /*
    begin(int configuration, bool fasti2c, char lidarliteAddress)

    Starts the sensor and I2C.

    Parameters
    ----------------------------------------------------------------------------
    configuration: Default 0. Selects one of several preset configurations.
    fasti2c: Default 100 kHz. I2C base frequency.
      If true I2C frequency is set to 400kHz.
    lidarliteAddress: Default 0x62. Fill in new address here if changed. See
      operating manual for instructions.
  */
  myLidarLite.begin(0, true); // Set configuration to default and I2C to 400 kHz, getst werkt op beide frequenties

  /*
    configure(int configuration, char lidarliteAddress)

    Selects one of several preset configurations.

    Parameters
    ----------------------------------------------------------------------------
    configuration:  Default 0.
      0: Default mode, balanced performance.
      1: Short range, high speed. Uses 0x1d maximum acquisition count.
      2: Default range, higher speed short range. Turns on quick termination
          detection for faster measurements at short range (with decreased
          accuracy)
      3: Maximum range. Uses 0xff maximum acquisition count.
      4: High sensitivity detection. Overrides default valid measurement detection
          algorithm, and uses a threshold value for high sensitivity and noise.
      5: Low sensitivity detection. Overrides default valid measurement detection
          algorithm, and uses a threshold value for low sensitivity and noise.
    lidarliteAddress: Default 0x62. Fill in new address here if changed. See
      operating manual for instructions.
  */
  myLidarLite.configure(0); // Change this number to try out alternate configurations
}

void loop() {
 
   int deptsample=0;
  /*
    distance(bool biasCorrection, char lidarliteAddress)

    Take a distance measurement and read the result.

    Parameters
    ----------------------------------------------------------------------------
    biasCorrection: Default true. Take aquisition with receiver bias
      correction. If set to false measurements will be faster. Receiver bias
      correction must be performed periodically. (e.g. 1 out of every 100
      readings).
    lidarliteAddress: Default 0x62. Fill in new address here if changed. See
      operating manual for instructions.
  */
  // count up to the loop count limit
  for(int i=1; i <= samplesperdisplay; i++)
  {
    deptsample = myLidarLite.distance()+ deptsample; // Take a measurement with receiver bias correction
    delay(50);  // Wait 50ms between pings (about 20 pings/sec). 29ms should be the shortest delay between pings.
  }
  dept = (deptsample/samplesperdisplay+mindept-mindistancekeelsensor); // Calculate the average dept valua including corrections of minium dept + distance sensor and keel
  Serial.print("Gemiddeld diepte: ");
  Serial.println(dept);
  delay(100);

  // display on lcd

  lcd.setCursor(0, 1); // set the cursor to column 0, line 1 (note: line 1 is the second row, since counting begins with 0):
  //dept = (myLidarLite.distance()+mindept-mindistancekeelsensor); // Convert ping time to dept (0 = outside set distance range, no ping echo)
  lcd.print(dept);  // print result
  lcd.print("  ");
  lcd.setCursor(4, 1);
  lcd.print("cm");
  if (dept <145)
   {
     lcd.setCursor(7, 1);
     lcd.print("kiel=op");
   }
   else
   {
   }
     if (dept >145 & dept< 290  )
   {
     lcd.setCursor(7, 1);
     lcd.print("         ");
   }
   else
   {
   }
  if (dept >290)
   {
     lcd.setCursor(7, 1);
     lcd.print("kiel=neer");
   }
   else
   {
   }  

} 
